import json
import requests
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Message, WebAppInfo


class BotSettings:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API –±—ç–∫—ç–Ω–¥–∞.

    Args:
        config_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (JSON).
    """
    def __init__(self, config_path: str):
        with open(config_path, 'r') as file:
            config = json.load(file)

        self.bot_token = config.get("bot_token", "")
        self.backend_url = config.get("backend_url", "")
        self.login = config.get("login", "")
        self.password = config.get("password", "")
        self.access_token = ''
        self.auth()

    def auth(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±—ç–∫—ç–Ω–¥ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
        """
        response = requests.post(url=f'{self.backend_url}/auth/login', data={
            'login': self.login,
            'password': self.password
        })

        self.access_token = response.json()['accessToken']

    def get_headers(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±—ç–∫—ç–Ω–¥—É.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –≤–∫–ª—é—á–∞—é—â–∏–π Bearer-—Ç–æ–∫–µ–Ω.
        """
        return {
            "Authorization": f'Bearer {self.access_token}'
        }

    def create_chat_url(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –≤ API –±—ç–∫—ç–Ω–¥–∞.

        Returns:
            str: URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞.
        """
        return f"{self.backend_url}/chat"

    def set_rating_url(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –≤ API –±—ç–∫—ç–Ω–¥–∞.

        Returns:
            str: URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.
        """
        return f"{self.backend_url}/chat/set-rating"

    def set_message_id_url(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ API –±—ç–∫—ç–Ω–¥–∞.

        Returns:
            str: URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        return f"{self.backend_url}/chat/set-message-id"


def create_answer_message(**kwargs) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        kwargs (dict): –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞, –≤–∫–ª—é—á–∞—è ID –æ–±—Ä–∞—â–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞.
    """
    return (f'¬∑ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {kwargs.get("id")} ¬∑\n\n'
            f'```–û—Ç–≤–µ—Ç:\n{kwargs.get("answer")}```\n\n ¬∑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ¬∑ \n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {kwargs.get("firstClass")}\n'
            f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {kwargs.get("secondClass")}')


def create_close_request_message(request_id: int, mark) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ü–µ–Ω–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.

    Args:
        request_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è.
        mark (int): –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ü–µ–Ω–∫–∏.
    """
    return f'–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {request_id} –æ—Ü–µ–Ω–µ–Ω–æ: {mark}'


def get_payload(message: Message) -> dict:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.
    """
    return {
        'userId': str(message.from_user.id),
        'fullName': message.from_user.full_name,
        'userName': message.from_user.name,
        'question': message.text
    }


def get_inline_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

    Returns:
        InlineKeyboardMarkup: –†–∞–∑–º–µ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    return InlineKeyboardMarkup([[
        InlineKeyboardButton('\u0031\uFE0F\u20E3', callback_data='1'),
        InlineKeyboardButton('\u0032\uFE0F\u20E3', callback_data='2'),
        InlineKeyboardButton('\u0033\uFE0F\u20E3', callback_data='3'),
        InlineKeyboardButton('\u0034\uFE0F\u20E3', callback_data='4'),
        InlineKeyboardButton('\u0035\uFE0F\u20E3', callback_data='5')],
        [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç üîÑ', callback_data='–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç üîÑ')]
    ])


def create_request_id(message: Message, is_before=False) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        is_before (bool): –ï—Å–ª–∏ True, —Å–æ–∑–¥–∞–µ—Ç—Å—è ID –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è.
    """
    message_id = message.id
    if is_before:
        message_id -= 1
    return f'{message.chat_id}{message_id}'


def get_web_app(link: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

    Args:
        link (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úèÔ∏è –§–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ ‚úèÔ∏è", web_app=WebAppInfo(link))]]
    )


def create_message_id(message: Message) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ ID –∏ —á–∞—Ç–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    return f'{message.chat_id}{message.id}'
