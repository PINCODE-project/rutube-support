from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackQueryHandler, ApplicationBuilder
from bot_helper import *

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ JSON
settings = BotSettings('bot_settings.json')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram-–±–æ—Ç–∞
app = ApplicationBuilder().token(settings.bot_token).build()


async def start(update: Update, _):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram Update, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        _ (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    """
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Çüëã\n–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?')


async def handle_message(update: Update, _):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ LLM.
    –ï—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏–±–æ –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–∞, –ª–∏–±–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram Update, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback.
        _ (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    """
    if update.callback_query is None:
        await get_answer_from_llm(update)
        return

    callback = update.callback_query
    await callback.answer()

    mark = callback.data
    if not mark.isdigit():
        await regenerate_answer(update)
        return

    data = {
        'messageId': create_message_id(update.effective_message),
        'rating': int(mark)
    }
    response = set_rating(data)

    request_id = response.json()['id']

    await callback.edit_message_text(
        text=create_close_request_message(request_id, mark),
        reply_markup=InlineKeyboardMarkup([])
    )


async def get_answer_from_llm(update: Update):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–≥–æ –Ω–∞ API LLM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
    –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram Update, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    payload = get_payload(update.message)
    try:
        response_data = get_answer(payload)
        await update.message.reply_text(
            text=create_answer_message(**response_data),
            parse_mode='Markdown'
        )

        if response_data.get('form') is not None:
            link = response_data.get('form')
            await update.message.reply_text(
                text=f'üìÉ –í –æ—Ç–≤–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è üìÉ',
                reply_markup=get_web_app(link)
            )

        rating_message = await update.message.reply_text(
            text="‚ú® –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç ‚ú®\n–í–∞–∂–Ω–æ: –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π",
            reply_markup=get_inline_keyboard()
        )

        set_message_id(int(response_data['id']), rating_message)

    except requests.exceptions.RequestException as e:
        await update.message.reply_text("–£–ø—Å! –û—à–∏–±–∫–∞...")


async def regenerate_answer(update: Update):
    """
    –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram Update, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π callback –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
    """
    callback = update.callback_query
    message = callback.message
    payload = {
        'question': '',
        'userId': str(message.from_user.id),
        'fullName': message.from_user.full_name,
        'userName': message.from_user.name,
        'oldMessageId': create_message_id(update.effective_message),
    }
    try:
        response_data = get_answer(payload)

        await callback.edit_message_text(
            text=create_answer_message(**response_data),
            parse_mode='Markdown'
        )

        if response_data.get('form') is not None:
            await app.bot.send_message(
                chat_id=message.chat_id,
                text='üìÉ –í –æ—Ç–≤–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è üìÉ',
                reply_markup=get_web_app(response_data)
            )

        rating_message = await app.bot.send_message(
            chat_id=message.chat_id,
            text="‚ú® –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç ‚ú®\n–í–∞–∂–Ω–æ: –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π",
            reply_markup=get_inline_keyboard()
        )

        set_message_id(response_data['id'], rating_message)

    except requests.exceptions.RequestException as e:
        await update.message.reply_text("–£–ø—Å! –û—à–∏–±–∫–∞...")


def set_rating(data: dict) -> requests.Response:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å.
    –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å.

    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ (messageId –∏ –æ—Ü–µ–Ω–∫–∞).

    Returns:
        requests.Response: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    """
    response = requests.post(
        url=settings.set_rating_url(),
        headers=settings.get_headers(),
        json=data
    )
    if response.status_code == 401:
        settings.auth()
        response = requests.post(
            url=settings.set_rating_url(),
            headers=settings.get_headers(),
            json=data
        )
    return response


def get_answer(payload: dict) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM.
    –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å.

    Args:
        payload (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).

    Returns:
        dict: –û—Ç–≤–µ—Ç –æ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    Raises:
        requests.exceptions.RequestException: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
    """
    response = requests.post(
        url=settings.create_chat_url(),
        headers=settings.get_headers(),
        json=payload)
    if response.status_code == 401:
        settings.auth()
        response = requests.post(
            url=settings.create_chat_url(),
            headers=settings.get_headers(),
            json=payload)
    response.raise_for_status()
    return response.json()


def set_message_id(request_id: int, message: Message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å.
    –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å.

    Args:
        request_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞.
        message (Message): –û–±—ä–µ–∫—Ç Telegram Message, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID.
    """
    response = requests.post(
        url=settings.set_message_id_url(),
        headers=settings.get_headers(),
        json={
            'id': request_id,
            'messageId': create_message_id(message)
        })
    if response.status_code == 401:
        settings.auth()
        requests.post(
            url=settings.set_message_id_url(),
            headers=settings.get_headers(),
            json={
                'id': request_id,
                'messageId': create_message_id(message)
            }
        )


if __name__ == '__main__':
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    app.add_handler(CommandHandler("start", start))  # –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(handle_message))  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    app.run_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞)
